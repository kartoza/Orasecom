---
- name: Check if Docker is installed
  shell: command -v docker
  register: docker_check
  changed_when: false
  failed_when: false

- name: Install Docker from official repository if not installed
  vars:
    arch_mapping:
      x86_64: amd64
      aarch64: arm64
  block:
    - name: Install required packages for Docker
      become: yes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present
        update_cache: yes

    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Install Docker and related packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Enable and start Docker services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service
        
  when: docker_check.stdout == ""

- name: Check if pip3 is installed
  shell: |
    if command -v pip3 > /dev/null 2>&1; then
      echo "pip3 is installed"
    else
      echo "pip3 is not installed"
    fi
  register: pip_check

- name: Display pip3 installation status
  debug:
    msg: "{{ pip_check.stdout }}"

- name: Install pip3 if not installed
  become: yes
  package:
    name: python3-pip
    state: present
  when: "'pip3 is not installed' in pip_check.stdout"

- name: Check if docker-compose is installed
  shell: |
    if command -v docker-compose > /dev/null 2>&1; then
      echo "docker-compose is installed"
    else
      echo "docker-compose is not installed"
    fi
  register: docker_compose_check

- name: Display docker-compose installation status
  debug:
    msg: "{{ docker_compose_check.stdout }}"

- name: Install docker-compose if not installed
  become: yes
  get_url:
    url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-Linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  when: "'docker-compose is not installed' in docker_compose_check.stdout"

- name: Create symlink to docker-compose in /usr/bin
  become: yes
  file:
    src: /usr/local/bin/docker-compose
    dest: /usr/bin/docker-compose
    state: link
  when: "'docker-compose is not installed' in docker_compose_check.stdout"

- name: Check if project directory exists
  stat:
    path: "{{ compose_project_dir }}"
  register: project_dir_status

- name: Create project directory
  become: yes
  file:
    path: "{{ compose_project_dir }}"
    state: directory
    mode: '0755'
  when: not project_dir_status.stat.exists

- name: Change ownership of project directory
  become: yes
  command: chown -R "{{ ansible_user }}" "{{ compose_project_dir }}"
  when:
    - not project_dir_status.stat.exists
    - ansible_user is defined

- name: Check if .env file already exists
  stat:
    path: "{{ compose_project_dir }}/.env"
  register: env_file_status

- name: Clone the Git repository
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ compose_project_dir }}"
    version: "{{ git_repo_version }}"
    force: yes
  when: not env_file_status.stat.exists

- name: Create .env file if it doesn't exist
  shell: >
    yes y | python3 create-envfile.py
    {% if https %} --https{% endif %}
    --env_type "{{ env_type }}"
    {% if hostname %} --hostname "{{ hostname }}"{% endif %}
    {% if email %} --email "{{ email }}"{% endif %}
    {% if geonodepwd %} --geonodepwd "{{ geonodepwd }}"{% endif %}
    {% if geoserverpwd %} --geoserverpwd "{{ geoserverpwd }}"{% endif %}
    {% if pgpwd %} --pgpwd "{{ pgpwd }}"{% endif %}
    {% if dbpwd %} --dbpwd "{{ dbpwd }}"{% endif %}
    {% if geodbpwd %} --geodbpwd "{{ geodbpwd }}"{% endif %}
    {% if clientid %} --clientid "{{ clientid }}"{% endif %}
    {% if clientsecret %} --clientsecret "{{ clientsecret }}"{% endif %}
  args:
    chdir: "{{ compose_project_dir }}"
  when: not env_file_status.stat.exists

- name: Build Docker images
  command: docker compose build
  args:
    chdir: "{{ compose_project_dir }}"

- name: Start Docker Compose application
  command: docker compose up -d --wait
  args:
    chdir: "{{ compose_project_dir }}"

- name: Ensure services are up and running
  command: docker compose ps
  args:
    chdir: "{{ compose_project_dir }}"
